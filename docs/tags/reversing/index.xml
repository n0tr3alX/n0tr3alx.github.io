<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Reversing - Tag - The Reverser&#39;s Draft</title>
        <link>https://moval0x1.github.io/tags/reversing/</link>
        <description>Reversing - Tag - The Reverser&#39;s Draft</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Aug 2024 19:23:17 -0300</lastBuildDate><atom:link href="https://moval0x1.github.io/tags/reversing/" rel="self" type="application/rss+xml" /><item>
    <title>Automating Tasks With x64dbg Scripts</title>
    <link>https://moval0x1.github.io/posts/automating-tasks-with-x64dbg-scripts/</link>
    <pubDate>Wed, 28 Aug 2024 19:23:17 -0300</pubDate>
    <author>moval0x1</author>
    <guid>https://moval0x1.github.io/posts/automating-tasks-with-x64dbg-scripts/</guid>
    <description><![CDATA[<h2 id="a-short-overview-of-x64dbg">A short overview of x64dbg</h2>
<p></p>
<p>According to <a href="https://x64dbg.com/#" target="_blank" rel="noopener noreffer "><strong>x64bg</strong></a> website, it is <em>an open-source x64/x32 debugger for windows</em>. You can find an extensible list of features there.</p>
<p>If you are generally interested in reverse engineering, you&rsquo;ll undoubtedly use x64dbg and I&rsquo;m sure you&rsquo;ll love it. Thanks for the fantastic tool <a href="https://github.com/mrexodia" target="_blank" rel="noopener noreffer "><strong>mrexodia</strong></a>.</p>
<h2 id="what-are-x64dbg-scripts">What are x64dbg scripts?</h2>
<p>x64dbg scripts are small chunks of instructions that are executed step by step. All the script commands are described <a href="https://help.x64dbg.com/en/latest/commands/index.html" target="_blank" rel="noopener noreffer "><strong>here</strong></a>. Let&rsquo;s start with a <em>&ldquo;Hello World!&rdquo;</em> as usual.</p>
<p>We can do it in two different ways: <a href="https://help.x64dbg.com/en/latest/commands/script/log.html" target="_blank" rel="noopener noreffer "><strong>log</strong></a> command or <a href="https://help.x64dbg.com/en/latest/commands/script/msg.html" target="_blank" rel="noopener noreffer "><strong>msg</strong></a> command. Both of them are super easy to work with!</p>
<h2 id="how-can-we-use-it">How can we use it?</h2>
<p>It is possible to execute these commands directly on the script tab, save a file, and load it on the script part, or type both in the <strong>command bar</strong>. In the first example, I used the <strong>command bar</strong> to execute the script.</p>
<h3 id="some-simple-examples">Some simple examples</h3>
<h4 id="log-command">Log command</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">log</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>
</span></span></code></pre></div><p></p>
<h4 id="msg-command">Msg command</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">msg</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>
</span></span></code></pre></div><p></p>
<h2 id="using-it-in-real-life">Using it in real life</h2>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/dwight-lets-do-this.gif" title="Lets do this!" data-thumbnail="/images/x64dbgScripts/dwight-lets-do-this.gif" data-sub-html="<h2>Let&#39;s do this!</h2><p>Lets do this!</p>">
        
    </a><figcaption class="image-caption">Let's do this!</figcaption>
    </figure></p>
<h2 id="getting-the-first-malware-sample">Getting the first malware sample</h2>
<p>On <a href="https://bazaar.abuse.ch/sample/7e18e5fe9e980c48ad67cc2ce7423e818e15c1256e2ffe4ce85c5cfbd5b30877/" target="_blank" rel="noopener noreffer "><strong>MalwareBazaar</strong></a> I&rsquo;ve collect a <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.darkgate" target="_blank" rel="noopener noreffer "><strong>DarkGate</strong></a> sample to start our analyzis.</p>
<blockquote>
<p>First documented in 2018, DarkGate is a commodity loader with features that include the ability to download and execute files to memory, a Hidden Virtual Network Computing (HVNC) module, keylogging, information-stealing capabilities, and privilege escalation. DarkGate makes use of legitimate AutoIt files and typically runs multiple AutoIt scripts. New versions of DarkGate have been advertised on a Russian language eCrime forum since May 2023.</p>
</blockquote>
<h2 id="understand-it-first-part">Understand it, first part</h2>
<p>This sample dropped an <strong>AutoIt</strong> and started it, so it was not a good choice in this example of x64dbg scripts. At that time, I had just opened the MalwareBazaar website and collected the first sample. So, I&rsquo;ve decided to keep it to show another option (a quite simple one).</p>
<p>When I opened the debugger, I focused on creating the process. My thoughts were to use <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" target="_blank" rel="noopener noreffer "><strong>CreateProcessA</strong></a> to collect the second parameter, which is the command line, and log it.</p>
<h2 id="crafting-the-easiest-script-in-the-world">Crafting the easiest script in the world</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#75715e">// Go to entrypoint
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">run</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Clear all breakpoints
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">bpc</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bphc</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bpmc</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Set the breakpoint
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">bp</span> <span style="color:#a6e22e">CreateProcessA</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">run</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Log the commandLine argument
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">log</span> <span style="color:#e6db74">&#34;[+] {s:esp+8}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">msg</span> <span style="color:#e6db74">&#34;Now, take a look on the LOG tab!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ret</span>
</span></span></code></pre></div><p>To load it on the x64dbg, we can find a tab called &ldquo;Script&rdquo;.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-script-tab.png" title="x64dbg script tab" data-thumbnail="/images/x64dbgScripts/x64dbg-script-tab.png" data-sub-html="<h2>x64dbg script tab</h2><p>x64dbg script tab</p>">
        
    </a><figcaption class="image-caption">x64dbg script tab</figcaption>
    </figure></p>
<p><strong>Right click &gt; Load Script</strong> and then load from a file or paste it directly.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-load-script-options.png" title="x64dbg load script" data-thumbnail="/images/x64dbgScripts/x64dbg-load-script-options.png" data-sub-html="<h2>x64dbg load script options</h2><p>x64dbg load script</p>">
        
    </a><figcaption class="image-caption">x64dbg load script options</figcaption>
    </figure></p>
<p>And that is the result of running this script.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-log-darkgate.png" title="x64dbg log script execution" data-thumbnail="/images/x64dbgScripts/x64dbg-log-darkgate.png" data-sub-html="<h2>x64dbg log tab after script execution</h2><p>x64dbg log script execution</p>">
        
    </a><figcaption class="image-caption">x64dbg log tab after script execution</figcaption>
    </figure></p>
<p>Really easy, isn&rsquo;t it? Let&rsquo;s try another one with more challenges to solve.</p>
<h2 id="getting-the-second-malware-sample">Getting the second malware sample</h2>
<p>Here I collect a really good example to this post, a <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.mars_stealer" target="_blank" rel="noopener noreffer "><strong>MarsStealer</strong></a> sample from <a href="https://bazaar.abuse.ch/sample/6509ea13b16d01894b8c084fc4fd292651d1ae88a59dfc63d2f87d8dbbcc6f03/" target="_blank" rel="noopener noreffer "><strong>MalwareBazaar</strong></a>.</p>
<blockquote>
<p>3xp0rt describes Mars Stealer as an improved successor of Oski Stealer, supporting stealing from current browsers and targeting crypto currencies and 2FA plugins.</p>
</blockquote>
<h2 id="understand-it-second-part">Understand it, second part</h2>
<h3 id="triage">Triage</h3>
<p>On <a href="https://github.com/horsicq/Detect-It-Easy" target="_blank" rel="noopener noreffer "><strong>DiE</strong></a> it does not tell us much about the file, looks like a <em>normal</em> file, right?</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/die-marsstealer.png" title="DiE marsStealer scan" data-thumbnail="/images/x64dbgScripts/die-marsstealer.png" data-sub-html="<h2>DiE MarsStealer scan</h2><p>DiE marsStealer scan</p>">
        
    </a><figcaption class="image-caption">DiE MarsStealer scan</figcaption>
    </figure></p>
<p>Using a second <a href="https://github.com/4n0nym0us/4n4lDetector" target="_blank" rel="noopener noreffer "><strong>option</strong></a> to scan, we find out that we are dealing with a version of <a href="https://www.oreans.com/Themida.php" target="_blank" rel="noopener noreffer "><strong>Themida</strong></a>.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/4detector-themida.png" title="4detector themida" data-thumbnail="/images/x64dbgScripts/4detector-themida.png" data-sub-html="<h2>Themida 2.x is identified</h2><p>4detector themida</p>">
        
    </a><figcaption class="image-caption">Themida 2.x is identified</figcaption>
    </figure></p>
<h3 id="the-themida-script">The Themida Script</h3>
<p>So, this time, I was really lucky! Now, I have a perfect example of how scripts can be helpful in our daily jobs.
On the x64dbg Github we found some excellent scripts and fortunately, one of them is a <a href="https://github.com/x64dbg/Scripts/blob/9decfb862e11052b53d045a63e7fcd927fe8027f/Themida%20v2.x.x.x%20OEP%20Finder.txt" target="_blank" rel="noopener noreffer "><strong>Themida v2.x.x.x OEP Finder by Yildo &amp; Mobile46</strong></a></p>
<p>One of the first comments there, tell us:</p>
<blockquote>
<p>Always use an anti-anti-debug plugin (SharpOD, ScyllaHide, etc.)</p>
</blockquote>
<p>Ok! I&rsquo;ve setting up my debugger with the Themida profile offered by <a href="https://github.com/x64dbg/ScyllaHide" target="_blank" rel="noopener noreffer "><strong>ScyllaHide</strong></a>.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-scyllahide-themida-profile.png" title="ScyllaHide Themida profile" data-thumbnail="/images/x64dbgScripts/x64dbg-scyllahide-themida-profile.png" data-sub-html="<h2>ScyllaHide Themida profile</h2><p>ScyllaHide Themida profile</p>">
        
    </a><figcaption class="image-caption">ScyllaHide Themida profile</figcaption>
    </figure></p>
<p>To run the script, we can press the space bar and wait for the OEP (Original EntryPoint).</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-script-loaded.png" title="x64dbg script loaded" data-thumbnail="/images/x64dbgScripts/x64dbg-script-loaded.png" data-sub-html="<h2>x64dbg Script Loaded</h2><p>x64dbg script loaded</p>">
        
    </a><figcaption class="image-caption">x64dbg Script Loaded</figcaption>
    </figure></p>
<p>After all the steps to execute, we got the OEP.</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-themida-script-finished.png" title="x64dbg OEP" data-thumbnail="/images/x64dbgScripts/x64dbg-themida-script-finished.png" data-sub-html="<h2>OEP found by the themida script</h2><p>x64dbg OEP</p>">
        
    </a><figcaption class="image-caption">OEP found by the themida script</figcaption>
    </figure></p>
<p>To dump it you can easily use the Scylla with:
<strong>IAT Autosearch &gt; Get Imports &gt; Dump &gt; Fix Dump</strong>.</p>
<p>And then&hellip; you can analyze the malware without any problem :)</p>
<p><figure><a class="lightgallery" href="/images/x64dbgScripts/x64dbg-themida-unpacked.png" title="x64dbg themida unpacked" data-thumbnail="/images/x64dbgScripts/x64dbg-themida-unpacked.png" data-sub-html="<h2>Themida unpacked using OEP Finder by Yildo &amp; Mobile46</h2><p>x64dbg themida unpacked</p>">
        
    </a><figcaption class="image-caption">Themida unpacked using OEP Finder by Yildo & Mobile46</figcaption>
    </figure></p>
<h2 id="breaking-down-the-script">Breaking Down the Script</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">bpd</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bphd</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bpmd</span>
</span></span></code></pre></div><p>These commands are used to clear or disable any existing breakpoints to ensure they do not interfere with the script’s execution:</p>
<ul>
<li><code>bpd</code>: Clear all data breakpoints.</li>
<li><code>bphd</code>: Clear all hardware breakpoints.</li>
<li><code>bpmd</code>: Clear all memory breakpoints.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#a6e22e">$sectionAddress</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">mod</span>.<span style="color:#a6e22e">main</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">mem</span>.<span style="color:#a6e22e">size</span>(<span style="color:#a6e22e">mod</span>.<span style="color:#a6e22e">main</span>())
</span></span></code></pre></div><p>It calculates the address where the section starts by adding the size of the main module to the base address of the module.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#a6e22e">mem</span>.<span style="color:#a6e22e">isvalid</span>(<span style="color:#a6e22e">$sectionAddress</span>)<span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">je</span> <span style="color:#a6e22e">error</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#a6e22e">mem</span>.<span style="color:#a6e22e">iscode</span>(<span style="color:#a6e22e">$sectionAddress</span>)<span style="color:#f92672">,</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">je</span> <span style="color:#a6e22e">error</span>
</span></span></code></pre></div><ul>
<li><code>mem.isvalid($sectionAddress)</code>: Checks if the memory at <code>$sectionAddress</code> is valid.</li>
<li><code>mem.iscode($sectionAddress)</code>: Checks if the memory at <code>$sectionAddress</code> contains executable code.</li>
</ul>
<p>If either check fails, it jumps to the error label, which outputs an error message.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#a6e22e">$backup</span><span style="color:#f92672">,</span> [<span style="color:#a6e22e">$sectionAddress</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bph</span> <span style="color:#a6e22e">VirtualProtect</span>
</span></span></code></pre></div><ul>
<li><code>mov $backup, [$sectionAddress]</code>: Saves the current value at <code>$sectionAddress</code> to <code>$backup</code>.</li>
<li><code>bph VirtualProtect</code>: Sets a hardware breakpoint on <strong>VirtualProtect</strong>, a function used to change memory protection, to monitor modifications.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">loop</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">erun</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> [<span style="color:#a6e22e">$sectionAddress</span>]<span style="color:#f92672">,</span> <span style="color:#a6e22e">$backup</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jne</span> <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jmp</span> <span style="color:#a6e22e">loop</span>
</span></span></code></pre></div><ul>
<li><code>erun</code>: Executes the code until a breakpoint is hit or the process continues.</li>
<li><code>cmp [$sectionAddress], $backup</code>: Compares the current value at <code>$sectionAddress</code> with the <code>$backup</code> value.</li>
</ul>
<p>If the values are not equal <strong>(jne)</strong>, it jumps to the continue label. Otherwise, it loops, repeatedly checking if the value has changed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#66d9ef">continue</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">erun</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">erun</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bphc</span> <span style="color:#a6e22e">VirtualProtect</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bpm</span> <span style="color:#a6e22e">$sectionAddress</span><span style="color:#f92672">,</span> <span style="color:#a6e22e">x</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">erun</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">d</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmt</span> <span style="color:#a6e22e">cip</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;OEP&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ret</span>
</span></span></code></pre></div><ul>
<li><code>erun (executed twice)</code>: Continues the execution until it hits another breakpoint.</li>
<li><code>bphc VirtualProtect</code>: Clears the hardware breakpoint on VirtualProtect.</li>
<li><code>bpm $sectionAddress, x</code>: Sets a memory breakpoint (on execute) at <code>$sectionAddress</code>.</li>
<li><code>erun</code>: Continues execution until the memory breakpoint is hit.</li>
<li><code>d</code>: Disassembles the current address.</li>
<li><code>cmt cip, &quot;OEP&quot;</code>: Comments the current instruction pointer <strong>(IP)</strong> with <em>&ldquo;OEP&rdquo;</em>, marking the found Original Entry Point.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-as" data-lang="as"><span style="display:flex;"><span><span style="color:#a6e22e">error</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">msg</span> <span style="color:#e6db74">&#34;This PE file is not supported!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ret</span>
</span></span></code></pre></div><p>If the script encounters an unsupported <strong>PE</strong> file, it outputs an error message and terminates.</p>
<h2 id="conclusion">Conclusion</h2>
<p>You can create scripts to automate most repetitive tasks or make them help, such as unpacking a specific packer, such as Themida.</p>
]]></description>
</item>
<item>
    <title>The Abuse of Exception Handlers</title>
    <link>https://moval0x1.github.io/posts/the-abuse-of-exception-handlers/</link>
    <pubDate>Wed, 26 Jun 2024 18:20:43 -0300</pubDate>
    <author>moval0x1</author>
    <guid>https://moval0x1.github.io/posts/the-abuse-of-exception-handlers/</guid>
    <description><![CDATA[<h2 id="the-definition">The Definition</h2>
<p>Everyone interested in programming probably has run into the too-famous &ldquo;try-catch&rdquo; thing. It is not something new. So, it is basically what we will talk about today. I used to say that it is always good to understand what happens behind the scenes; I mean, speaking about try-catch, it is nothing mysterious; it is kind of easy and simple to understand. But most of the time, we are talking about the surface of this, we are not digging into the details. If you would like to get the &ldquo;core&rdquo; of details, it is time to stop being only on the surface of this and take a look at the structure behind it. To start, let&rsquo;s define what it <em>Exception Handling</em>.</p>
<blockquote>
<p><em>The <a href="https://en.wikipedia.org/wiki/Exception_handling" target="_blank" rel="noopener noreffer "><strong>definition</strong></a> of an exception is based on the observation that each procedure has a precondition, a set of circumstances for which it will terminate &ldquo;normally&rdquo;.<a href="https://en.wikipedia.org/wiki/Exception_handling#cite_note-Cristian-1" target="_blank" rel="noopener noreffer ">¹</a> An exception handling mechanism allows the procedure to raise an exception<a href="https://en.wikipedia.org/wiki/Exception_handling#cite_note-FOOTNOTEGoodenough1975b683%E2%80%93684-2" target="_blank" rel="noopener noreffer ">²</a> if this precondition is violated,<a href="https://en.wikipedia.org/wiki/Exception_handling#cite_note-Cristian-1" target="_blank" rel="noopener noreffer ">¹</a> for example if the procedure has been called on an abnormal set of arguments. The exception handling mechanism then handles the exception.<a href="https://en.wikipedia.org/wiki/Exception_handling#cite_note-FOOTNOTEGoodenough1975b684-3" target="_blank" rel="noopener noreffer ">³</a></em></p>
</blockquote>
<h2 id="what-is-seh-structured-exception-handler-">What is SEH (Structured Exception Handler) ?</h2>
<p>Structured Exception Handling <strong>(SEH)</strong> is a mechanism in Windows operating systems that handles exceptions, such as errors or unexpected events, that occur during the execution of a program. <strong>SEH</strong> allows a program to respond to these exceptions in a controlled manner, ensuring that the system remains stable and providing a way to handle errors gracefully.</p>
<p>According to <a href="https://learn.microsoft.com/en-us/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170#remarks" target="_blank" rel="noopener noreffer "><strong>Microsoft</strong></a>, with <strong>SEH</strong>, you can ensure that resources, such as memory blocks and files, get released correctly if execution unexpectedly terminates. You can also handle specific problems—for example, insufficient memory—by using concise structured code that doesn&rsquo;t rely on goto statements or elaborate testing of return codes.</p>
<p>As mentioned, <strong>SEH</strong> functions manage exceptions in a program but it can be exploited by <strong>malware</strong> to <em>deceive disassemblers</em> and <em>complicate code analysis</em>. One technique uses the <em>FS segment</em> register to access the Thread Environment Block <strong>(TEB)</strong>, which contains a pointer to the <strong>SEH</strong> chain. The <strong>SEH</strong> chain functions like a stack, with the most recently added function executing during an exception. By manipulating this chain, malware authors can obfuscate their code, making it <strong>difficult</strong> for analysts to identify and <strong>understand malicious behavior</strong>.</p>
<h2 id="a-glance-example-of-seh">A glance example of SEH</h2>
<p>We can see how it works by getting this simple example, compiling it, and looking at IDA and x64dbg.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C++" data-lang="C++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">myFunction</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">__try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; 
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">__except</span> (EXCEPTION_EXECUTE_HANDLER) {
</span></span><span style="display:flex;"><span>        printf(<span style="color:#e6db74">&#34;An exception occurred!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    myFunction();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The graph view of IDA.</p>
<p><figure><a class="lightgallery" href="/images/exceptionHandlers/ida-seh-graph.png" title="IDA SEH Graph" data-thumbnail="/images/exceptionHandlers/ida-seh-graph.png" data-sub-html="<h2>IDA SEH Graph</h2><p>IDA SEH Graph</p>">
        
    </a><figcaption class="image-caption">IDA SEH Graph</figcaption>
    </figure></p>
<p>The x64dbg view.</p>
<p><figure><a class="lightgallery" href="/images/exceptionHandlers/x64dbg-seh-disassembly.png" title="x64dbg SEH disassembly" data-thumbnail="/images/exceptionHandlers/x64dbg-seh-disassembly.png" data-sub-html="<h2>x64dbg SEH disassembly</h2><p>x64dbg SEH disassembly</p>">
        
    </a><figcaption class="image-caption">x64dbg SEH disassembly</figcaption>
    </figure></p>
<h2 id="a-malware-approach-to-seh">A Malware Approach to SEH</h2>
<p>This code below was created to show a way to make a simple custom exception and abuse the SEH if a debugger was detected (another straightforward trick, ya?). Looking at it with our reversing tools, we can see that magic happens. Even in the future, if you need to deal with an obfuscated or packed code, You will for sure remember the basics that you saw here :D</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C++" data-lang="C++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;Windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Function to be executed after the exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">RedirectedExecution</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[x] Executed after the exception</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LONG WINAPI <span style="color:#a6e22e">CustomExceptionHandler</span>(PEXCEPTION_POINTERS pExceptionInfo)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	printf(<span style="color:#e6db74">&#34;[x] Exception code: 0x%X</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, pExceptionInfo<span style="color:#f92672">-&gt;</span>ExceptionRecord<span style="color:#f92672">-&gt;</span>ExceptionCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Modify the instruction pointer (EIP) to jump to the redirected execution
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	pExceptionInfo<span style="color:#f92672">-&gt;</span>ContextRecord<span style="color:#f92672">-&gt;</span>Eip <span style="color:#f92672">=</span> (DWORD_PTR)RedirectedExecution;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> EXCEPTION_CONTINUE_EXECUTION;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">CheckDebuggerAndTriggerException</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (IsDebuggerPresent())
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">__try</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Cause an exception to occur (divide by zero)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">int</span> zero <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> zero;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">__except</span> (CustomExceptionHandler(GetExceptionInformation()))
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] Divide by Zero Exception handled by the __except block.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[+] No debugger detected. Normal execution continues.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	CheckDebuggerAndTriggerException();
</span></span><span style="display:flex;"><span>	printf(<span style="color:#e6db74">&#34;[+] Program executed successfully.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the code above we are using the <a href="https://learn.microsoft.com/en-us/windows/win32/debug/getexceptioninformation" target="_blank" rel="noopener noreffer "><strong>GetExceptionInformation</strong></a>, which provides the function with the exception information structure, allowing it to both read and modify the details.</p>
<h2 id="what-is-addvectoredexceptionhandler">What is AddVectoredExceptionHandler?</h2>
<blockquote>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling" target="_blank" rel="noopener noreffer "><strong>Vectored exception handlers</strong></a> are an <strong>extension</strong> to <em>structured exception handling</em>. An application can register a function to watch or handle all exceptions for the application. Vectored handlers are not frame-based, therefore, you can add a handler that will be called regardless of where you are in a call frame. Vectored handlers are called in the order that they were added, after the debugger gets a first chance notification, but before the system begins unwinding the stack.</p>
</blockquote>
<h3 id="so-what-is-the-difference">So, what is the difference?</h3>
<p><strong>Structured exception handling (SEH</strong>) and <strong>Vectored Exception Handling (VEH)</strong> are both mechanisms in Windows for handling exceptions, but they serve different purposes:</p>
<ul>
<li>
<p><strong>SEH</strong>:</p>
<ul>
<li>It is a Microsoft extension to C and C++ that allows graceful handling of exceptional situations, such as hardware faults.</li>
<li>It provides complete control over exception handling and is usable across all programming languages and machines.</li>
<li>It is typed, meaning different exception types can be caught and handled differently.</li>
<li>It uses stack unwinding to properly handle both user exceptions (C++ exceptions) and OS exceptions.</li>
<li>It has <strong>&ldquo;first-chance&rdquo;</strong> handling, allowing you to log or handle exceptions before unwinding destroys local variables.</li>
<li>SEH is recommended for specific scenarios where fine-grained control is needed.</li>
</ul>
</li>
<li>
<p><strong>VEH</strong>:</p>
<ul>
<li>It is an extension to SEH introduced in Windows XP.</li>
<li>It allows an application to register a function to watch or handle all exceptions for the entire application.</li>
<li>Unlike SEH, VEH handlers are <strong>not</strong> <em>frame-based</em>, so they can be called regardless of the call frame.</li>
<li>VEH handlers have <strong>priority</strong> over SEH handlers.</li>
<li>VEH is useful for scenarios where you need to intercept exceptions globally, such as debugging or logging purposes.</li>
</ul>
</li>
</ul>
<p>In summary, <strong>SEH</strong> provides fine-grained control over exception handling, while <strong>VEH</strong> allows global exception monitoring. <em>&ldquo;It is neither better nor worst, it is just different&rdquo;</em>. (MC Marcinho - <a href="https://youtu.be/hKbcorS8deY?si=i3OL2RKA_rP_27Vo" target="_blank" rel="noopener noreffer ">Nem Melhor Nem Pior</a>)</p>
<h2 id="abusing-addvectoredexceptionhandler">Abusing AddVectoredExceptionHandler</h2>
<h3 id="the-beginning">The beginning</h3>
<p><figure><a class="lightgallery" href="/images/exceptionHandlers/img-gandalf.png" title="Gandalf" data-thumbnail="/images/exceptionHandlers/img-gandalf.png" data-sub-html="<h2>Gandalf</h2><p>Gandalf</p>">
        
    </a><figcaption class="image-caption">Gandalf</figcaption>
    </figure></p>
<p>Let&rsquo;s start with some malware that abuses the <strong>VEH</strong>.</p>
<ul>
<li><a href="https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware/" target="_blank" rel="noopener noreffer ">ALPHV/BlackCat Ransomware</a></li>
<li><a href="https://unit42.paloaltonetworks.com/guloader-variant-anti-analysis/" target="_blank" rel="noopener noreffer ">Guloader</a></li>
<li><a href="https://unit42.paloaltonetworks.com/excel-add-ins-dridex-infection-chain/" target="_blank" rel="noopener noreffer ">Dridex</a></li>
</ul>
<p>How can it be abused? Let&rsquo;s take a simple example here and look inside the debugger.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C++" data-lang="C++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;Windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>LPVOID allocateMemory <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> shellCode[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x90</span>,							<span style="color:#75715e">// nop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#ae81ff">0xB0</span>, <span style="color:#ae81ff">0x01</span>,						<span style="color:#75715e">// mov al, 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#ae81ff">0xC3</span>							<span style="color:#75715e">// ret
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ULONG <span style="color:#a6e22e">Handler</span>(PEXCEPTION_POINTERS exception_ptr) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (exception_ptr<span style="color:#f92672">-&gt;</span>ExceptionRecord<span style="color:#f92672">-&gt;</span>ExceptionCode <span style="color:#f92672">==</span> EXCEPTION_ACCESS_VIOLATION) {
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">[-] EXCEPTION_ACCESS_VIOLATION</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Set new EIP
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		exception_ptr<span style="color:#f92672">-&gt;</span>ContextRecord<span style="color:#f92672">-&gt;</span>Eip <span style="color:#f92672">=</span> (DWORD)allocateMemory;
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Enables single-step mode for the processor. 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// In single-step mode, the processor generates a debug exception 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// (INT 1) after executing each instruction.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		exception_ptr<span style="color:#f92672">-&gt;</span>ContextRecord<span style="color:#f92672">-&gt;</span>EFlags <span style="color:#f92672">|=</span> <span style="color:#ae81ff">0x100</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> EXCEPTION_CONTINUE_EXECUTION;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> EXCEPTION_CONTINUE_SEARCH;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	printf(<span style="color:#e6db74">&#34;[+] Starting VEH example...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>	allocateMemory <span style="color:#f92672">=</span> <span style="color:#f92672">::</span>VirtualAlloc(
</span></span><span style="display:flex;"><span>		NULL, 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">sizeof</span>(shellCode), 
</span></span><span style="display:flex;"><span>		MEM_COMMIT <span style="color:#f92672">|</span> MEM_RESERVE, PAGE_EXECUTE_READWRITE);
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>	memcpy_s(allocateMemory, <span style="color:#66d9ef">sizeof</span>(shellCode), shellCode, <span style="color:#66d9ef">sizeof</span>(shellCode));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Add the handler
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#f92672">::</span>AddVectoredExceptionHandler(TRUE, (PVECTORED_EXCEPTION_HANDLER)Handler);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Access Violation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> p <span style="color:#f92672">=</span> <span style="color:#66d9ef">nullptr</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the code above, the dereferencing the null pointer will cause an <strong>ACCESS_VIOLATION</strong> which should be caught by our <em>VEH</em>. When you call the <strong><a href="https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler" target="_blank" rel="noopener noreffer ">AddVectoredExceptionHandler</a></strong>, you need two parameters.</p>
<pre tabindex="0"><code>PVOID AddVectoredExceptionHandler(
  ULONG                       First,
  PVECTORED_EXCEPTION_HANDLER Handler
);
</code></pre><p>As in the example above, the Handler type is a <strong><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pvectored_exception_handler" target="_blank" rel="noopener noreffer ">PVECTORED_EXCEPTION_HANDLER</a></strong></p>
<pre tabindex="0"><code>PVECTORED_EXCEPTION_HANDLER PvectoredExceptionHandler;

LONG PvectoredExceptionHandler(
 [in] _EXCEPTION_POINTERS *ExceptionInfo
)
{...}
</code></pre><p>It is a pointer to <strong><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers" target="_blank" rel="noopener noreffer ">EXCEPTION_POINTERS</a></strong> structure which contains the <strong><a href="https://learn.microsoft.com/en-us/windows/desktop/api/winnt/ns-winnt-exception_record" target="_blank" rel="noopener noreffer ">ExceptionRecord</a></strong> and <strong><a href="https://learn.microsoft.com/en-us/windows/desktop/api/winnt/ns-winnt-context" target="_blank" rel="noopener noreffer ">ContextRecord</a></strong>.</p>
<pre tabindex="0"><code>typedef struct _EXCEPTION_POINTERS {
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT          ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
</code></pre><p>Now we have all the intrinsic details about it, and we can understand what goes within the <strong>Handler</strong> function. I&rsquo;m forcing an <strong>ACCESS_VIOLATION</strong> and using my <em>Handler</em> to take care of it; if it is the expected exception, I will change the <strong>EIP</strong> to my shellcode.</p>
<h3 id="the-debugger-view">The Debugger View</h3>
<p>The address of the shellcode in memory and in sequence the <strong>AddVectoredExceptionHandler</strong> function with the renamed <strong>veh_fn_handler</strong>
<figure><a class="lightgallery" href="/images/exceptionHandlers/x64dbg-shellcode-memory.png" title="x64dbg Shellcode in memory" data-thumbnail="/images/exceptionHandlers/x64dbg-shellcode-memory.png" data-sub-html="<h2>Shellcode in memory</h2><p>x64dbg Shellcode in memory</p>">
        
    </a><figcaption class="image-caption">Shellcode in memory</figcaption>
    </figure></p>
<p>When we arrive at the point where the null pointer would receive a value, we get the exception.
<figure><a class="lightgallery" href="/images/exceptionHandlers/x64fbg-access-violation.png" title="x64dbg ACCESS_VIOLATION" data-thumbnail="/images/exceptionHandlers/x64fbg-access-violation.png" data-sub-html="<h2>ACCESS_VIOLATION on x64dbg</h2><p>x64dbg ACCESS_VIOLATION</p>">
        
    </a><figcaption class="image-caption">ACCESS_VIOLATION on x64dbg</figcaption>
    </figure></p>
<p>After that, pressing <strong>F9</strong> will reach our breakpoint on the <strong>veh_fn_handler</strong> and once more pressing <strong>F9</strong> we arrive at our <em>shellcode</em> by the <strong>EXCEPTION_SINGLE_STEP</strong>.</p>
<p><figure><a class="lightgallery" href="/images/exceptionHandlers/x64dbg-exception-message.png" title="x64dbg Exception Message" data-thumbnail="/images/exceptionHandlers/x64dbg-exception-message.png" data-sub-html="<h2>Exception message</h2><p>x64dbg Exception Message</p>">
        
    </a><figcaption class="image-caption">Exception message</figcaption>
    </figure></p>
<p>And finally :D
<figure><a class="lightgallery" href="/images/exceptionHandlers/x64dbg-shellcode.png" title="x64dbg shellcode" data-thumbnail="/images/exceptionHandlers/x64dbg-shellcode.png" data-sub-html="<h2>Shellcode on debugger</h2><p>x64dbg shellcode</p>">
        
    </a><figcaption class="image-caption">Shellcode on debugger</figcaption>
    </figure></p>
<h2 id="conclusion">Conclusion</h2>
<p>The idea behind this post was to show a different approach used by some malware families to achieve their goals in a way that requires the analyst to spend some time flowing through the code to understand what is happening. With these simple examples, anyone interested in this can compile the code and take a look at the debugger and disassembler.</p>
<p>Reversing is mostly a case of practice! Do and repeat the process as much as you can until it starts to make sense.</p>
<p>I hope this post has been informative and useful to you. If you have any questions, doubts, or want to help me correct any mistakes, please feel free to contact me.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Exception_handling" target="_blank" rel="noopener noreffer ">https://en.wikipedia.org/wiki/Exception_handling</a></li>
<li><a href="https://learn.microsoft.com/en-us/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170#remarks" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/cpp/cpp/structured-exception-handling-c-cpp?view=msvc-170#remarks</a></li>
<li><a href="https://bytepointer.com/resources/pietrek_crash_course_depths_of_win32_seh.htm" target="_blank" rel="noopener noreffer ">https://bytepointer.com/resources/pietrek_crash_course_depths_of_win32_seh.htm</a></li>
<li><a href="https://unprotect.it/technique/misusing-structured-exception-handlers/" target="_blank" rel="noopener noreffer ">https://unprotect.it/technique/misusing-structured-exception-handlers/</a></li>
<li><a href="https://1malware1.medium.com/anti-disassembly-techniques-e012338f2ae0" target="_blank" rel="noopener noreffer ">https://1malware1.medium.com/anti-disassembly-techniques-e012338f2ae0</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/debug/getexceptioninformation" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/debug/getexceptioninformation</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling</a></li>
<li><a href="https://unprotect.it/technique/addvectoredexceptionhandler/" target="_blank" rel="noopener noreffer ">https://unprotect.it/technique/addvectoredexceptionhandler/</a></li>
<li><a href="https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware/" target="_blank" rel="noopener noreffer ">https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware/</a></li>
<li><a href="https://research.nccgroup.com/2022/03/01/detecting-anomalous-vectored-exception-handlers-on-windows/" target="_blank" rel="noopener noreffer ">https://research.nccgroup.com/2022/03/01/detecting-anomalous-vectored-exception-handlers-on-windows/</a></li>
<li><a href="https://unit42.paloaltonetworks.com/guloader-variant-anti-analysis/" target="_blank" rel="noopener noreffer ">https://unit42.paloaltonetworks.com/guloader-variant-anti-analysis/</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pvectored_exception_handler" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-pvectored_exception_handler</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_pointers</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_record" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_record</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context" target="_blank" rel="noopener noreffer ">https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context</a></li>
</ul>
]]></description>
</item>
<item>
    <title>Qakbot Analysis</title>
    <link>https://moval0x1.github.io/posts/qakbot-analysis/</link>
    <pubDate>Sat, 20 Jan 2024 14:59:04 -0300</pubDate>
    <author>moval0x1</author>
    <guid>https://moval0x1.github.io/posts/qakbot-analysis/</guid>
    <description><![CDATA[<h2 id="the-qakbot-malware-family">The Qakbot Malware Family</h2>
<p><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.qakbot" target="_blank" rel="noopener noreffer "><strong>QBot</strong></a> is a modular information stealer also known as Oakboat, Pinkslipbot, Qbot or Quakbot. It has been active for years since 2007. It has historically been known as a banking Trojan, meaning that it steals financial data from infected systems, and a loader using C2 servers for payload targeting and download.</p>
<h2 id="loader">Loader</h2>
<p>When I got this sample, the first thing that caught my eye was the lack of strings and the number of sections with their names, which is not something normal in a binary.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/die-sections.png" title="DiE Sections" data-thumbnail="/images/zero2auto/2024-01-20/die-sections.png" data-sub-html="<h2>DiE Sections</h2><p>DiE Sections</p>">
        
    </a><figcaption class="image-caption">DiE Sections</figcaption>
    </figure></p>
<p>My starting point in these cases is to set some breakpoints in known APIs such as <strong><code>VirtualAlloc</code></strong>, <strong><code>VirtualProtect</code></strong>, <strong><code>WriteProcessMemory</code></strong>, <strong><code>CreateProcessInternalW</code></strong> and others that can be used in the same context, either to self injection or remote injection. I could execute the binary and validate if it has some injection or anything related to that. However, let&rsquo;s start putting BP on the common APIs used for any injection.</p>
<p>In that case, as I set a BP on VirtualProtect, it stopped on the API, and I arrived at the right point after putting the PE section onto the dump.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/x64dbg-dump.png" title="x64dbg Dump" data-thumbnail="/images/zero2auto/2024-01-20/x64dbg-dump.png" data-sub-html="<h2>x64dbg Dump</h2><p>x64dbg Dump</p>">
        
    </a><figcaption class="image-caption">x64dbg Dump</figcaption>
    </figure></p>
<p>We have the second stage file at the base address <strong><code>0x2550000</code></strong>. To dump it, follow these steps: <strong>Right Click on <code>0x4D</code> on dump -&gt; Follow in Memory Map -&gt; Right-click on the base address -&gt; Dump Memory to File</strong>.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/pe-bear-imports.png" title="PE-bear Imports" data-thumbnail="/images/zero2auto/2024-01-20/pe-bear-imports.png" data-sub-html="<h2>PE-bear Imports</h2><p>PE-bear Imports</p>">
        
    </a><figcaption class="image-caption">PE-bear Imports</figcaption>
    </figure></p>
<p>We can see on <a href="https://github.com/hasherezade/pe-bear" target="_blank" rel="noopener noreffer "><strong>PE-bear</strong></a> that all the imports are good, so we don&rsquo;t need anything to fix it! :)</p>
<h2 id="first-stage">First Stage</h2>
<p>In this stage, what caught my attention was the entropy to the <strong><code>.rdata</code></strong> section and <strong><code>.rsrc</code></strong>, and the lack of useful strings.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/die-entropy.png" title="DiE Entropy" data-thumbnail="/images/zero2auto/2024-01-20/die-entropy.png" data-sub-html="<h2>DiE Entropy</h2><p>DiE Entropy</p>">
        
    </a><figcaption class="image-caption">DiE Entropy</figcaption>
    </figure></p>
<p>Using BinaryNinja to take a look in that stage, I was able to see a interesting function with lots of calls and the result of these function be a value that would be used in a <strong><code>GetModuleHandleA</code></strong>. Hmm, it raised some flag to me.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/bn-strings-decrypt-func.png" title="BinaryNinja Decrypt Func" data-thumbnail="/images/zero2auto/2024-01-20/bn-strings-decrypt-func.png" data-sub-html="<h2>BinaryNinja Decrypt Func</h2><p>BinaryNinja Decrypt Func</p>">
        
    </a><figcaption class="image-caption">BinaryNinja Decrypt Func</figcaption>
    </figure></p>
<p>Looking at this function in the <strong>x64dbg</strong>, things become easier to understand. I could see that after passing this function, it returns a string decrypted. Within this function, we can see the decrypt pattern, as shown below.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/x64dbg-decrypt-strings-routine.png" title="x64dbg Decrypt Routine" data-thumbnail="/images/zero2auto/2024-01-20/x64dbg-decrypt-strings-routine.png" data-sub-html="<h2>x64dbg Decrypt Routine</h2><p>x64dbg Decrypt Routine</p>">
        
    </a><figcaption class="image-caption">x64dbg Decrypt Routine</figcaption>
    </figure></p>
<p>To add a layer of simplicity to my <strong>binja</strong> analysis, I just created a simple (and maybe not so good) script to decrypt all these strings and add them as a comment. I&rsquo;ve tried to create the script as close as possible to what&rsquo;s in the assembly code.</p>
<p>Here are the <strong>binja <a href="https://github.com/moval0x1/Zero2Auto/tree/main/qakbot" target="_blank" rel="noopener noreffer ">scripts</a></strong> used to decrypt strings, APIs, and anything needed for this analysis. After that, you&rsquo;ll find something like that.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/bn-plugin-decrypt-strings.png" title="Binary Ninja Plugin" data-thumbnail="/images/zero2auto/2024-01-20/bn-plugin-decrypt-strings.png" data-sub-html="<h2>Binary Ninja Plugin</h2><p>Binary Ninja Plugin</p>">
        
    </a><figcaption class="image-caption">Binary Ninja Plugin</figcaption>
    </figure></p>
<p>With strings, it is much better to dive into the malware. Unfortunately, some APIs are resolved in runtime, and even with the names, I cannot see where it would be called. Based on that, I went to the debugger, and with a hand from my friend <a href="https://leandrofroes.github.io/" target="_blank" rel="noopener noreffer "><strong>Leandro</strong></a> - he showed me about this anti-analysis process that I&rsquo;ve passed and didn&rsquo;t catch the idea of - I could understand that the <strong><code>CreateProcess</code></strong> was started as an anti-analysis step. Ask for help is an excellent way to learn; I learned a new trick with his help; thanks, man.</p>
<p>Let me try to summarize things here.</p>
<ol>
<li>When the binary is executed, it tries to create a new process using the param <strong>/C</strong>.</li>
<li>This parameter starts a series of <strong>anti-analysis</strong> tricks and leads us down the wrong path.</li>
<li>Forcing the result <strong>false</strong> after the <strong><code>CreateProcess</code></strong>.</li>
</ol>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/x64dbg-create-process-w.png" title="CreateProcessW" data-thumbnail="/images/zero2auto/2024-01-20/x64dbg-create-process-w.png" data-sub-html="<h2>CreateProcessW</h2><p>CreateProcessW</p>">
        
    </a><figcaption class="image-caption">CreateProcessW</figcaption>
    </figure>
With the flow passing by the anti-analysis part, we will not find anything interesting. I&rsquo;ve changed the <strong><code>EAX</code></strong> from <strong><code>1</code></strong> to <strong><code>0</code></strong>. As mentioned at the beginning of this first stage, we have a high entropy in the <strong><code>.rsrc</code></strong> part; based on that, I&rsquo;ve added a breakpoint on the <strong><code>LoadResource</code></strong> API. However, this API is only noticed after decrypting the API names, as shown in the image below.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/bn-comments-and-symbols.png" title="CommentsAndSymbols" data-thumbnail="/images/zero2auto/2024-01-20/bn-comments-and-symbols.png" data-sub-html="<h2>Plugin CommentsAndSymbols</h2><p>CommentsAndSymbols</p>">
        
    </a><figcaption class="image-caption">Plugin CommentsAndSymbols</figcaption>
    </figure></p>
<p>Now, let us analyze the actual flow!</p>
<h3 id="the-resource">The Resource</h3>
<p>To start talk about the resource, wee need to understand what happen here. We can put it in parts such as:</p>
<ol>
<li>Load the resource.</li>
<li>Decrypt it using RC4.</li>
<li>Get the SHA1 sum.</li>
<li>Inject it into memory.</li>
</ol>
<p>All the things that we&rsquo;ve seen here are indicators that this <strong>resource</strong> is something <em>malicious</em>, and for sure, at any time, resource APIs would be called. As expected, the resource named <strong><code>307</code></strong> is decrypted and allocated. We can follow it in two ways, the easier way to get this is:</p>
<blockquote>
<p>Follow it in memory map &gt; dump &gt; open in a hex editor and remove the <strong><code>SHA1 SUM</code></strong> before the <strong><code>MZ</code></strong> and overlay, and that&rsquo;s it.</p>
</blockquote>
<p>It is easy, but it is much better to have a script to help us find it in the resource section, decrypt it, and save on disk a clear file. Think about it: I&rsquo;ve created a <a href="https://github.com/moval0x1/Zero2Auto/tree/main/qakbot" target="_blank" rel="noopener noreffer "><strong>script</strong></a> and added it to GitHub for those who want to use it.</p>
<h3 id="scripts">Scripts</h3>
<p>To understand what the scripts do, let me briefly explain here. We have here a normal <strong><code>RC4</code></strong> routine followed by a <strong><code>SHA1 SUM</code></strong> validation. Although we can see the program here - at least a part of it - <strong>This Program cannot&hellip;</strong>. It doesn&rsquo;t look like the complete straightforward program; after the <strong><code>SHA1</code></strong> validation, a weird value was found that is used out of this call in a comparison: <strong><code>0x616CD31A</code></strong>. Searching for it, I only found it in a blog of a friend of mine <a href="https://darkopcodes.wordpress.com/2020/06/07/malware-analysis-qakbot-part-2/" target="_blank" rel="noopener noreffer "><strong>dark0pcodes</strong></a>. Based on what he says, it is a modified version of the <a href="https://github.com/jibsen/brieflz" target="_blank" rel="noopener noreffer "><strong>BriefLZ</strong></a> compression algorithm, which makes much more sense now.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2024-01-20/x64dbg-decrypt-resource-routine.png" title="Decrypt Resource Routine" data-thumbnail="/images/zero2auto/2024-01-20/x64dbg-decrypt-resource-routine.png" data-sub-html="<h2>Decrypt Resource Routine</h2><p>Decrypt Resource Routine</p>">
        
    </a><figcaption class="image-caption">Decrypt Resource Routine</figcaption>
    </figure></p>
<p>In order to decompress this file correctly after decrypting, we need to replace the modified bytes with the correct bytes, as added in the script found on GitHub.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>replaced_data <span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>hexlify(decrypted_resource)<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;616cd31a&#34;</span>, <span style="color:#e6db74">&#34;626C7A1A&#34;</span>)
</span></span></code></pre></div><h2 id="c2-in-the-second-stage">C2 in the Second Stage</h2>
<p>In this subsequent phase, the approach mirrors that of the initial stage, involving encrypted resources utilizing the <strong><code>RC4</code></strong> encryption algorithm. These resources, identified by the names <strong><code>308</code></strong> and <strong><code>311</code></strong>, persist in their encrypted state. Employing an identical script for extraction, we uncover pertinent data pertaining to the campaign, along with details about the utilized IPs.</p>
<p>For easy reference, the extracted configurations can be located <a href="https://github.com/moval0x1/Zero2Auto/tree/main/qakbot" target="_blank" rel="noopener noreffer "><strong>here</strong></a>.</p>
<h2 id="iocs">IoCs</h2>
<ul>
<li><strong>Loader:</strong> <code>b92c0aafb4e9b0fc2b023dbb14d7e848249f29e02b0e4cd8624ce27e55c9ac4c</code></li>
<li><strong>First Stage:</strong> <code>b3e4ad642e5e68944be3aabdfc77c6818e75778f8764448bdc80762fef2dad5b</code></li>
<li><strong>Second Stage:</strong> <code>a9669005062b3c89146731a1fdd155f3902be2cfbb92a76b0173b61a35dd6516</code></li>
</ul>
<h2 id="concluding-thoughts">Concluding Thoughts</h2>
<p>While there are numerous other aspects to explore in this second stage of Qakbot, I&rsquo;ll conclude this sample discussion here. An opportunity exists for those interested in delving deeper to uncover the encrypted communication methods employed within this sample. Perhaps in a future version, I will undertake this exploration. Thus far, my encounter with Qakbot has been a valuable learning experience, guiding me to develop two plugins for <strong>Binja</strong> <a href="https://github.com/moval0x1/BinjaExportTox64dbg" target="_blank" rel="noopener noreffer "><strong>BinjaExportTox64dbg</strong></a> and <a href="https://github.com/moval0x1/CommentsAndSymbols" target="_blank" rel="noopener noreffer "><strong>CommentsAndSymbols</strong></a>.</p>
<p>Thank you for taking the time to read this! Should you have any questions or suggestions, please don&rsquo;t hesitate to reach out. Feel free to contact me at your convenience! :)</p>
]]></description>
</item>
<item>
    <title>Zero 2 Auto Custom sample - Part 2</title>
    <link>https://moval0x1.github.io/posts/zero2auto-custom-sample-part-2/</link>
    <pubDate>Sun, 19 Nov 2023 21:03:36 &#43;0800</pubDate>
    <author>moval0x1</author>
    <guid>https://moval0x1.github.io/posts/zero2auto-custom-sample-part-2/</guid>
    <description><![CDATA[<h2 id="binary-ninja-plugin">Binary Ninja Plugin</h2>
<p>To start this second part of the custom sample analysis, I would like to add the script created using <a href="https://binary.ninja/" target="_blank" rel="noopener noreffer ">Binary Ninja</a>. You can find the doc <a href="https://docs.binary.ninja/" target="_blank" rel="noopener noreffer ">here</a>.</p>
<p>The script is not complex - if you have any suggestions to improve this, please share them with me :) - and it is probably not the fanciest code you have been seeing, but it is something that works, lol. It can be found on my <strong><a href="https://github.com/moval0x1/Zero2Auto/blob/main/zero2auto-custom-sample-decode.py" target="_blank" rel="noopener noreffer ">Github</a></strong> page.</p>
<p>Here you can see how it works on <a href="https://binary.ninja/" target="_blank" rel="noopener noreffer ">Binary Ninja</a>.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/BinaryNinja-Zero2Auto-Plugin.gif" title="Decode strings Binja Plugin" data-thumbnail="/images/zero2auto/2023-11-19/BinaryNinja-Zero2Auto-Plugin.gif" data-sub-html="<h2>Decode strings Binja Plugin</h2><p>Decode strings Binja Plugin</p>">
        
    </a><figcaption class="image-caption">Decode strings Binja Plugin</figcaption>
    </figure></p>
<h2 id="further-stages">Further Stages</h2>
<p>Looking at the strings, I found something that caught my eye; there was a <strong><code>cruloader</code></strong> and it looked weird; maybe the name of this second part? Perhaps it&rsquo;s a joke? Who knows? I&rsquo;m assuming it is a part of the malware and not a joke.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/bn-cruloader.png" title="Cruloader" data-thumbnail="/images/zero2auto/2023-11-19/bn-cruloader.png" data-sub-html="<h2>Cruloader</h2><p>Cruloader</p>">
        
    </a><figcaption class="image-caption">Cruloader</figcaption>
    </figure></p>
<p>DiE tells us that we are dealing with a <strong><code>C/C++</code></strong> program.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/DiE-cruloader.png" title="DiE" data-thumbnail="/images/zero2auto/2023-11-19/DiE-cruloader.png" data-sub-html="<h2>DiE</h2><p>DiE</p>">
        
    </a><figcaption class="image-caption">DiE</figcaption>
    </figure></p>
<p>Usually, when I have to deal with it, my first step is to go to the <strong><code>main</code></strong> function that usually for <strong><code>C/C++</code></strong> program can be found by three pushes before a call, something like that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ASM" data-lang="ASM"><span style="display:flex;"><span><span style="color:#a6e22e">push</span> <span style="color:#66d9ef">something</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">push</span> <span style="color:#66d9ef">something</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">push</span> <span style="color:#66d9ef">something</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">call</span> <span style="color:#66d9ef">somethingElse</span>
</span></span></code></pre></div><p>I found the <strong><code>main</code></strong> function, it had an interesting part, and I can tell you why. After the <strong><code>GetModuleFileNameA</code></strong> which is responsible for: <strong>retrieve the fully qualified path for the file that contains the specified module.</strong> and the <strong><code>_strtok</code></strong> that is a kind of <strong>split</strong> function - until now, nothing new, right? - there is a function that compares with a hex value.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/bn-begin-main.png" title="Begin of main" data-thumbnail="/images/zero2auto/2023-11-19/bn-begin-main.png" data-sub-html="<h2>Begin of main</h2><p>Begin of main</p>">
        
    </a><figcaption class="image-caption">Begin of main</figcaption>
    </figure></p>
<p>Just after going inside this function, we have some values that we can use to search in Google - always a good idea to use Google to bring some insights to us. There are many occurences of the hex value <strong><code>0xedb88320</code></strong> with a <a href="https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/" target="_blank" rel="noopener noreffer ">XOR</a> operation.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/bn-crc32.png" title="CRC32 function" data-thumbnail="/images/zero2auto/2023-11-19/bn-crc32.png" data-sub-html="<h2>CRC32 function</h2><p>CRC32 function</p>">
        
    </a><figcaption class="image-caption">CRC32 function</figcaption>
    </figure></p>
<p>One of the first results brings us the information that this is a <a href="https://lxp32.github.io/docs/a-simple-example-crc32-calculation/" target="_blank" rel="noopener noreffer ">CRC32</a> implementation. To validate it, I will use the HashDB plugin from OALabs implemented on <a href="https://binary.ninja/" target="_blank" rel="noopener noreffer ">Binary Ninja</a> by <a href="https://github.com/cxiao/hashdb_bn" target="_blank" rel="noopener noreffer ">Cindy Xiao</a>, luckily it worked very well! &lt;3. I just renamed this function to <strong><code>mw_crc32</code></strong>. Because it is easier read names than random numbers.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/bn-hashdb-svchost.png" title="HashDB" data-thumbnail="/images/zero2auto/2023-11-19/bn-hashdb-svchost.png" data-sub-html="<h2>HashDB</h2><p>HashDB</p>">
        
    </a><figcaption class="image-caption">HashDB</figcaption>
    </figure></p>
<blockquote>
<p><strong>Just a comment here!</strong></p>
<p>The challenge could be easily resolved using <a href="https://github.com/x64dbg/x64dbg" target="_blank" rel="noopener noreffer ">x64dbg</a>; the goal here is to use <a href="https://binary.ninja/" target="_blank" rel="noopener noreffer ">Binary Ninja</a> to study the tool and also practice some static analysis to collect information as much as possible without debugging it.</p>
</blockquote>
<p>This part is so cool when we understand what is going on here. Look, this function resolves most of the content in run time, but it does not mean that we cannot understand the result without debugging it; basically, the malware gets this hex value and performs a loop, as shown on the left side. We can summarize it as:</p>
<ul>
<li>Get the char[i].</li>
<li>Rotate Left char[i] with 4.</li>
<li>XOR char[i] with 0xC5.</li>
</ul>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/bn-get-pastebin-url.png" title="Get Pastebin URL" data-thumbnail="/images/zero2auto/2023-11-19/bn-get-pastebin-url.png" data-sub-html="<h2>Get Pastebin URL</h2><p>Get Pastebin URL</p>">
        
    </a><figcaption class="image-caption">Get Pastebin URL</figcaption>
    </figure></p>
<p>If we perform the same sequence mentioned previously, the magic happens and we get the Pastebin <strong><code>https[:]//pastebin[.]com/raw/mLem9DGk</code></strong>. I just used <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex%28%27Auto%27%29Rotate_left%284,false%29XOR%28%7B%27option%27:%27Hex%27,%27string%27:%27c5%27%7D,%27Standard%27,false%29&amp;input=ZGExYjFiNWI2YmZmYWVhZTViNGE2YjFiMGE3YWNhYmFiZTZhYWE4YWFlN2I0YTJiYWU4YTk4MGE4YWNmMTgyOGVh" target="_blank" rel="noopener noreffer ">CyberChef</a> to help me with that.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/cyberchef-pastebin-url.png" title="CyberChef Pastebin URL" data-thumbnail="/images/zero2auto/2023-11-19/cyberchef-pastebin-url.png" data-sub-html="<h2>CyberChef Pastebin URL</h2><p>CyberChef Pastebin URL</p>">
        
    </a><figcaption class="image-caption">CyberChef Pastebin URL</figcaption>
    </figure></p>
<p>The content of Pastebin will be allocated - according to the APIs called after that. Taking a look at Pastebin, it only has another URL which points to this PNG file <strong><code>https[:]//i[.]ibb[.]co/KsfqHym/PNG-02-Copy[.]png</code></strong>. Nice, no? Unfortunately, no :/ Not everything is a flower in this awesome world of malware analysis. The image is corrupted, and it might be fixed before the &ldquo;execution?&rdquo;. It is my hypothesis.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/img-corrupted.png" title="Corrupted IMG" data-thumbnail="/images/zero2auto/2023-11-19/img-corrupted.png" data-sub-html="<h2>Corrupted IMG</h2><p>Corrupted IMG</p>">
        
    </a><figcaption class="image-caption">Corrupted IMG</figcaption>
    </figure></p>
<p>Following taking notes by static analysis, I found good things, and I kind of stayed stuck at some points, but let&rsquo;s keep moving until I got completely stuck. As mentioned before, sometimes I have renamed functions based on voices in my head, lol. To be honest, it is not this but essentially based on what I can understand by the function that I&rsquo;m analyzing. So, after a deep analysis, one of the functions needed to have its name changed. Mainly because I understood that it also decodes the corrupted file, and I will show you that.</p>
<p>The function named as <strong><code>mw_create_writeFile_temp</code></strong> now is called by <strong><code>mw_decode_create_writeFile_temp</code></strong>. Let&rsquo;s dig into it. I can explain almost the whole function without putting the binary on a debugger, but unfortunately, my static analysis skill is not as sharp as I intend to have it in the future - a short future, I hope. It starts by getting the content from Pastebin, performing one more time the <strong><code>rol 4 &gt; xor 0x1f</code></strong> sequence to decode the string <strong><code>.tuptuo\</code></strong>. This string looks reversed. Am I sure about that? No, yet, but if we reverse, it becomes <strong><code>/output.</code></strong>. After that, it performs another decode sequence - but this time, I cannot understand what the string means. I will see it and the other parts on the debugger; I&rsquo;m just pointing here what I&rsquo;ve found in the static analysis part.</p>
<p>At the end of performing some operations in a loop, after that, another loop with the <strong>IMG</strong> content <strong><code>XOR 0x61</code></strong>. When it finishes, the malware resolves some injection APIs, such as:</p>
<ul>
<li>CreateProcessA</li>
<li>WriteProcessMemory</li>
<li>ResumeThread</li>
<li>VirtualAllocEx</li>
<li>VirtualAlloc</li>
<li>CreateRemoteThread</li>
</ul>
<p>It looks like the malware will inject one more time content, keeping the analysis; the following function uses the same <strong><code>rol &gt; xor</code></strong> sequence to decode the full path of <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex%28%27Auto%27%29Rotate_left%284,false%29XOR%28%7B%27option%27:%27Hex%27,%27string%27:%27a2%27%7D,%27Standard%27,false%29&amp;input=MWU4OWVmNWZiY2NjNmNkYzVkMWRlZjFmYmQxZDZkN2NmYzE5MDllZjFkNGQxY2FjZGMxZDZkYzg3Y2FkN2M" target="_blank" rel="noopener noreffer ">svchost</a> <strong><code>C:\Windows\System32\svchost.exe</code></strong> and, at the end of this function, the last function is in charge of a Process Hollowing. How do I know that without debugging? Based on the APIs called, google is always my good friend, and it helped me find, for instance, this <a href="https://github.com/m0n0ph1/Process-Hollowing" target="_blank" rel="noopener noreffer ">github</a> with a very close code as I found in the last function.</p>
<p>So far, so good. Now, let me validate all my hypotheses.</p>
<h2 id="the-winner-debugger">The winner debugger</h2>
<p>As I started debugging, I just figured out that I forgot to see and renamed some functions, such as the first <strong><code>IsDebuggerPresent</code></strong> and the most important one, that is the <strong><code>CreateToolhelp32Snapshot</code></strong>. According to MSDN, this API <strong>takes a snapshot of the specified processes, as well as the heaps, modules, and threads used by these processes.</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>HANDLE <span style="color:#a6e22e">CreateToolhelp32Snapshot</span>(
</span></span><span style="display:flex;"><span>  [in] DWORD dwFlags,
</span></span><span style="display:flex;"><span>  [in] DWORD th32ProcessID
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>It will take a &ldquo;photo&rdquo; of the process list and loop through it searching for something, in our case, something hashed by CRC32. I could easily bypass this function result by changing the Zero Flag or the Jump below the comparison, but I&rsquo;m here to learn more and dig deep into the challenge. Let&rsquo;s debug it! :)</p>
<p>I found that when it compares <strong><code>EAX</code></strong> with <strong><code>0x7C6FFE70</code></strong> it returns the wrong result, so let me identify what this value is - I know that it uses a CRC32 implementation, and I will use it to my advantage.</p>
<p>As it spends some time in the loop, I will use a <a href="https://help.x64dbg.com/en/latest/introduction/ConditionalBreakpoint.html" target="_blank" rel="noopener noreffer ">Conditional BreakPoint</a> to only break when it is <strong><code>explorer.exe</code></strong> because malware authors, usually use this function to validate the processes running to close an analysis application or close the process itself if find any weird stuff, I will start there, I would not spend too much time on this loop, to be honest.</p>
<p>I just added this beautiful line <strong><code>strstr(utf16(ESI), &quot;explorer.exe&quot;)</code></strong> on this line and executed my program. Easy no?</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-conditional-bp.png" title="Conditional BreakPoint" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-conditional-bp.png" data-sub-html="<h2>Conditional BreakPoint</h2><p>Conditional BreakPoint</p>">
        
    </a><figcaption class="image-caption">Conditional BreakPoint</figcaption>
    </figure></p>
<p>And it worked!</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-bp-explorer-exe.png" title="BreakPoint on explorer.exe" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-bp-explorer-exe.png" data-sub-html="<h2>BreakPoint on explorer.exe</h2><p>BreakPoint on explorer.exe</p>">
        
    </a><figcaption class="image-caption">BreakPoint on explorer.exe</figcaption>
    </figure></p>
<p>I got two programs that I opened to analyze the binary, and both of them were searched by the malware; one of them was <strong><code>ProceessHacker.exe</code></strong> with the hash <strong><code>0x7C6FFE70</code></strong>.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-processHacker.png" title="ProcessHacker x64dbg" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-processHacker.png" data-sub-html="<h2>ProcessHacker x64dbg</h2><p>ProcessHacker x64dbg</p>">
        
    </a><figcaption class="image-caption">ProcessHacker x64dbg</figcaption>
    </figure></p>
<p>After closes them I got <strong><code>x32dbg.exe</code></strong> with the hash <strong><code>0xD2F05B7D</code></strong>.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-x32dbg-process.png" title="x32dbg process" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-x32dbg-process.png" data-sub-html="<h2>x32dbg process</h2><p>x32dbg process</p>">
        
    </a><figcaption class="image-caption">x32dbg process</figcaption>
    </figure></p>
<p>As I changed the name of my debugger to <strong><code>moval0x1.exe</code></strong> I was able to continue without further problems. I have to admit that some tasks are easier with debugger than just open in a disassembly and try to understand without dynamicaly run.</p>
<p>The malware download the <strong><code>.PNG</code></strong> file, get the size using <strong><code>HttpQueryInfoA</code></strong> with <strong><code>dwInfoLevel</code></strong> being passed 5, which means <strong><code>HTTP_QUERY_CONTENT_LENGTH</code></strong>.</p>
<blockquote>
<p>Retrieves the size of the resource, in bytes.</p>
</blockquote>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-output-jpg.png" title="output.jpg" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-output-jpg.png" data-sub-html="<h2>output.jpg</h2><p>output.jpg</p>">
        
    </a><figcaption class="image-caption">output.jpg</figcaption>
    </figure></p>
<p>I saw the <strong>cruloader</strong> string, but I didn&rsquo;t catch the idea behind it debugging. I got that it concat with the temp folder to save the output; it also uses <a href="https://isc.sans.edu/diary/Stackstrings&#43;type&#43;2/26192/" target="_blank" rel="noopener noreffer ">stackstring</a> to disrupt our analysis.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-cruloader-temp-folder.png" title="Create file" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-cruloader-temp-folder.png" data-sub-html="<h2>Create file</h2><p>Create file</p>">
        
    </a><figcaption class="image-caption">Create file</figcaption>
    </figure></p>
<p>The magic of learning and reading about APIs, after the folder has been created, we have a <strong><code>WriteFile</code></strong> telling us everything we need to know.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>BOOL <span style="color:#a6e22e">WriteFile</span>(
</span></span><span style="display:flex;"><span>  [in]                HANDLE       hFile,
</span></span><span style="display:flex;"><span>  [in]                LPCVOID      lpBuffer,
</span></span><span style="display:flex;"><span>  [in]                DWORD        nNumberOfBytesToWrite,
</span></span><span style="display:flex;"><span>  [out, optional]     LPDWORD      lpNumberOfBytesWritten,
</span></span><span style="display:flex;"><span>  [in, out, optional] LPOVERLAPPED lpOverlapped
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>Based on that, we can see that the handle is <strong><code>0x470</code></strong>, the content to be written is at the address <strong><code>0x03740000</code></strong>, and the length is <strong><code>0x435B8</code></strong>. It means that the entire file will be written on disk.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/x64dbg-writefile.png" title="WriteFile API" data-thumbnail="/images/zero2auto/2023-11-19/x64dbg-writefile.png" data-sub-html="<h2>WriteFile API</h2><p>WriteFile API</p>">
        
    </a><figcaption class="image-caption">WriteFile API</figcaption>
    </figure></p>
<p>And one more time it gets a reverse string, <strong><code>redaolurc</code></strong> that is the same <strong><code>cruloader</code></strong> and it is find inside the <strong><code>.PNG</code></strong> as we can see below.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/wxHex-PNG.png" title="wxHexEditor" data-thumbnail="/images/zero2auto/2023-11-19/wxHex-PNG.png" data-sub-html="<h2>wxHexEditor</h2><p>wxHexEditor</p>">
        
    </a><figcaption class="image-caption">wxHexEditor</figcaption>
    </figure></p>
<p>Ok, but, why this information is useful? That&rsquo;s a good question! The answer is some lines below. The malware reads the content of the <strong><code>.PNG</code></strong> search for the reverse <strong>cruloader</strong> string and everything after that should be <strong><code>XORed</code></strong> with <strong><code>0x61</code></strong>, the image is a Zero2Auto logo and it was used to deceive the first seen of the file. We can see in the image below that it kind of worked.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/fi-xored-png.png" title="XORed PNG" data-thumbnail="/images/zero2auto/2023-11-19/fi-xored-png.png" data-sub-html="<h2>XORed PNG</h2><p>XORed PNG</p>">
        
    </a><figcaption class="image-caption">XORed PNG</figcaption>
    </figure></p>
<p>After that, we know that the Process Hollowing is coming. Probably I missed something because the binary showed me some congratulations strings but didn&rsquo;t run - maybe my &ldquo;smart&rdquo; moment in just trying to perform the <strong><code>XOR</code></strong> was not enough. To finish it, taking a look at the renamed function <strong><code>mw_processHollowing</code></strong> I just passed all steps as I did previously, and before the malware <strong><code>ResumeThread</code></strong> I dumped the injected file on <strong><code>svchost.txt</code></strong> and fixed the imports - by the way, there was an organized mess :D</p>
<p>And finally, there is this beautiful message here!</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-11-19/cruloader-messagebox.png" title="Cruloader MessageBox" data-thumbnail="/images/zero2auto/2023-11-19/cruloader-messagebox.png" data-sub-html="<h2>Cruloader MessageBox</h2><p>Cruloader MessageBox</p>">
        
    </a><figcaption class="image-caption">Cruloader MessageBox</figcaption>
    </figure></p>
<p>Thank you for reading! It was a really fun challenge.</p>
]]></description>
</item>
<item>
    <title>Zero 2 Auto Custom sample - Part 1</title>
    <link>https://moval0x1.github.io/posts/zero2auto-custom-sample-part-1/</link>
    <pubDate>Tue, 31 Oct 2023 21:03:36 &#43;0800</pubDate>
    <author>moval0x1</author>
    <guid>https://moval0x1.github.io/posts/zero2auto-custom-sample-part-1/</guid>
    <description><![CDATA[<h2 id="the-ir-case">The IR Case</h2>
<blockquote>
<p>Hi there,</p>
<p>During an ongoing investigation, one of our IR team members managed to locate an unknown sample on an infected machine belonging to one of our clients. We cannot pass that sample onto you currently as we are still analyzing it to determine what data was exfilatrated. However, one of our backend analysts developed a YARA rule based on the malware packer, and we were able to locate a similar binary that seemed to be an earlier version of the sample we&rsquo;re dealing with. Would you be able to take a look at it? We&rsquo;re all hands on deck here, dealing with this situation, and so we are unable to take a look at it ourselves.
We&rsquo;re not too sure how much the binary has changed, though developing some automation tools might be a good idea, in case the threat actors behind it start utilizing something like Cutwail to push their samples.
I have uploaded the sample alongside this email.</p>
<p>Thanks, and Good Luck!</p>
</blockquote>
<h2 id="triage">Triage</h2>
<p>Let&rsquo;s start looking at this binary to see what information we can collect to create our hypothesis. DiE tells us that we are dealing with a 32-bit binary compiled with Microsoft Visual Studio, and the language is C/C++. Also, it has Anti-Debugger protection.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/DiE-main-bin.png" title="Detect It Easy" data-thumbnail="/images/zero2auto/2023-10-31/DiE-main-bin.png" data-sub-html="<h2>Detect It Easy</h2><p>Detect It Easy</p>">
        
    </a><figcaption class="image-caption">Detect It Easy</figcaption>
    </figure></p>
<p>When we are looking at a binary, it is not recommended to use only one thing as evidence; I mean, we need to be sure that, for example, this sample has any kind of protection. To be sure about it, we can use - besides the automatic scan from DiE.</p>
<ol>
<li>A high entropy means that something higher than 7.2 is suspicious.</li>
<li>A small number of readable strings is also suspicious.</li>
<li>A small number of imports could indicate a packed program.</li>
<li>The difference between disk and memory can also be used as an indicator.</li>
</ol>
<p>Here we can see that the <a href="https://redcanary.com/blog/threat-hunting-entropy/" target="_blank" rel="noopener noreffer ">entropy</a> for the <strong><code>.rsrc</code></strong> section is <strong><code>7.9</code></strong>. DiE helps us by telling us that it is packed - and at this point, I totally agree.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/DiE-entropy.png" title="DiE Entropy" data-thumbnail="/images/zero2auto/2023-10-31/DiE-entropy.png" data-sub-html="<h2>DiE Entropy</h2><p>DiE Entropy</p>">
        
    </a><figcaption class="image-caption">DiE Entropy</figcaption>
    </figure></p>
<p>Following the steps to validate our binary, we can identify a small number of readable strings and some weird strings as shown in the image below. This could be a good indicator that strings are created in runtime, or that there is any kind of obfuscation here, as we don&rsquo;t know yet it is just an indicator that should be validated.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/DiE-strings.png" title="DiE Strings" data-thumbnail="/images/zero2auto/2023-10-31/DiE-strings.png" data-sub-html="<h2>DiE Strings</h2><p>DiE Strings</p>">
        
    </a><figcaption class="image-caption">DiE Strings</figcaption>
    </figure></p>
<p>Also, we have here just one import. Looks really suspicious to me, we can keep taking a look at other points, but for me, at this point, we have some interesting things here to investigate and validate. My hypothesis now, based on the triage is:</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/DiE-imports.png" title="DiE Imports" data-thumbnail="/images/zero2auto/2023-10-31/DiE-imports.png" data-sub-html="<h2>DiE Imports</h2><p>DiE Imports</p>">
        
    </a><figcaption class="image-caption">DiE Imports</figcaption>
    </figure></p>
<ol>
<li>The program is with some kind of packing.</li>
<li>We have a resource that probably will be used and it is also packed.</li>
<li>Just one import raises a red flag for me, probably other imports would be resolved in run time.</li>
</ol>
<p>So, let&rsquo;s validate it! :)</p>
<h2 id="analysis">Analysis</h2>
<p>As I&rsquo;m starting to learn how to use <a href="https://binary.ninja/" target="_blank" rel="noopener noreffer ">Binary Ninja</a>, I will use it to help in my analysis process. At the beginning of the analysis, Binja already helped me by telling me that the strings that we saw with <strong><code>DiE</code></strong> raised some hypotheses for me; now I have the evidence that this will be resolved in runtime, and it looks like encrypted or obfuscated APIs.</p>
<p>Why? Simple! We have here <strong><code>GetProcAddress</code></strong> and <strong><code>LoadLibrary</code></strong>. Usually, these APIs are used largely to load a DLL (in our case, <strong><code>kernel32.dll</code></strong>, as shown in the triage part), and <strong><code>GetProcAddress</code></strong> is used to get the address of a passed function. The question here is, what is the name passed? We can then follow two paths:</p>
<ol>
<li>Debugging it and seeing the names.</li>
<li>Creating a script to resolve the name for us.</li>
</ol>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/Binja-cross-reference.png" title="Binary Ninja" data-thumbnail="/images/zero2auto/2023-10-31/Binja-cross-reference.png" data-sub-html="<h2>Binary Ninja</h2><p>Binary Ninja</p>">
        
    </a><figcaption class="image-caption">Binary Ninja</figcaption>
    </figure></p>
<p>So, the second option looks gorgeous, but by now, let me just get the names using x64dbg. In a second moment, I can create it and add it to this analysis.</p>
<p>First of all, I renamed the address <strong><code>0x00401300</code></strong> to <strong><code>mw_resolve_api</code></strong> on Binja and now I&rsquo;m looking at this address on the dbg.</p>
<p>Not only do good things happen when we are reversing something, but sometimes we have to deal with destiny. In this case, we will not need much. We can rebase our binja to get the correct address, we can remove <a href="https://www.sans.org/blog/dealing-with-aslr-when-analyzing-malware-on-windows-8-1/" target="_blank" rel="noopener noreffer ">ASLR</a> with our <strong><code>x64dbg</code></strong>, but I will just set the address without the base address. Look, I&rsquo;m getting this error.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-address-error.png" title="x64dbg error" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-address-error.png" data-sub-html="<h2>x64dbg error</h2><p>x64dbg error</p>">
        
    </a><figcaption class="image-caption">x64dbg error</figcaption>
    </figure></p>
<p>Because in my dbg the base address is not <strong><code>0x00400000</code></strong>, we can confirm it by taking a look on <strong><code>Memory Map</code></strong> and then, we see that my base is <strong><code>0x009F0000</code></strong>.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-memory-map.png" title="Memory Map" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-memory-map.png" data-sub-html="<h2>Memory Map</h2><p>Memory Map</p>">
        
    </a><figcaption class="image-caption">Memory Map</figcaption>
    </figure></p>
<p>What should I do? Just use <strong><code>0x009F1300</code></strong>, easy and now I can rename this function as <strong><code>mw_resolve_api</code></strong>. All good now! :)</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-mw-resolve-api.png" title="mw_resolve_api" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-mw-resolve-api.png" data-sub-html="<h2>mw_resolve_api</h2><p>mw_resolve_api</p>">
        
    </a><figcaption class="image-caption">mw_resolve_api</figcaption>
    </figure></p>
<p>Now, I would like to see where this function is called; I just need to press <strong><code>x</code></strong> on the line above - that is the beginning of this function - and I will see the cross references.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-xref.png" title="Xref" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-xref.png" data-sub-html="<h2>Xref</h2><p>Xref</p>">
        
    </a><figcaption class="image-caption">Xref</figcaption>
    </figure></p>
<p>Doubling click on the first call and setting a BP on it, we can now start our debugging and get all the names after passing by this call.</p>
<blockquote>
<p>A quick explanation here!</p>
<p>When we are working with C/C++, usually, the calling convention here tells us that the function return will be present in EAX. Based on that, we execute the function and take a look at EAX to see the result. Easy, no?</p>
</blockquote>
<p>To summarize, let me put here just the translations.</p>
<table>
<thead>
<tr>
<th>Before</th>
<th>After</th>
</tr>
</thead>
<tbody>
<tr>
<td>F5gG8e514pbag5kg</td>
<td>SetThreadContext</td>
</tr>
<tr>
<td>.5ea5/QPY4//</td>
<td>kernel32.dll</td>
</tr>
<tr>
<td>pe51g5Ceb35ffn</td>
<td>CreateProcessA</td>
</tr>
<tr>
<td>I9egh1/n//b3rk</td>
<td>VirtualAllocEx</td>
</tr>
<tr>
<td>E5fh=5G8e514</td>
<td>ResumeThread</td>
</tr>
<tr>
<td>Je9g5Ceb35ffz5=bel</td>
<td>WriteProcessMemory</td>
</tr>
<tr>
<td>I9egh1/n//b3</td>
<td>VirtualAlloc</td>
</tr>
<tr>
<td>E514Ceb35ffz5=bel</td>
<td>ReadProcessMemory</td>
</tr>
<tr>
<td>t5gG8e514pbag5kg</td>
<td>GetThreadContext</td>
</tr>
<tr>
<td>F9m5b6E5fbhe35</td>
<td>SizeofResource</td>
</tr>
<tr>
<td>s9a4E5fbhe35n</td>
<td>FindResourceA</td>
</tr>
<tr>
<td>yb3.E5fbhe35</td>
<td>LockResource</td>
</tr>
<tr>
<td>yb14E5fbhe35</td>
<td>LoadResource</td>
</tr>
</tbody>
</table>
<p>Yeah! Now we can see that we will find exciting things being made with the resource and memory; just looking at these APIs, we can already imagine that something might be injected, and it seems like the resource. The next step for me is to pay attention to the <strong><code>VirtualAlloc</code></strong> and <strong><code>VirtualAllocEx</code></strong> and all the <strong><code>resource</code></strong> APIs.</p>
<p>Using the dbg and knowing that the functions would be resolved at runtime, the program at the beginning calls <strong><code>CreateProcessA</code></strong></p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-create-process-a.png" title="CreateProcessA" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-create-process-a.png" data-sub-html="<h2>CreateProcessA</h2><p>CreateProcessA</p>">
        
    </a><figcaption class="image-caption">CreateProcessA</figcaption>
    </figure></p>
<p>As we can see here on the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" target="_blank" rel="noopener noreffer ">MSDN</a> definition.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>BOOL <span style="color:#a6e22e">CreateProcessA</span>(
</span></span><span style="display:flex;"><span>  [in, optional]      LPCSTR                lpApplicationName,
</span></span><span style="display:flex;"><span>  [in, out, optional] LPSTR                 lpCommandLine,
</span></span><span style="display:flex;"><span>  [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,
</span></span><span style="display:flex;"><span>  [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,
</span></span><span style="display:flex;"><span>  [in]                BOOL                  bInheritHandles,
</span></span><span style="display:flex;"><span>  [in]                DWORD                 dwCreationFlags,
</span></span><span style="display:flex;"><span>  [in, optional]      LPVOID                lpEnvironment,
</span></span><span style="display:flex;"><span>  [in, optional]      LPCSTR                lpCurrentDirectory,
</span></span><span style="display:flex;"><span>  [in]                LPSTARTUPINFOA        lpStartupInfo,
</span></span><span style="display:flex;"><span>  [out]               LPPROCESS_INFORMATION lpProcessInformation
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>The 4th param is 4. According to MSDN, the process flags set on <a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags" target="_blank" rel="noopener noreffer ">deCreationFlags</a> should be created in a suspended state.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/msdn-create-suspended.png" title="CREATE_SUSPENDED" data-thumbnail="/images/zero2auto/2023-10-31/msdn-create-suspended.png" data-sub-html="<h2>CREATE_SUSPENDED</h2><p>CREATE_SUSPENDED</p>">
        
    </a><figcaption class="image-caption">CREATE_SUSPENDED</figcaption>
    </figure></p>
<blockquote>
<p>Another quick explanation here!</p>
<p>Usually, a program that is created in a suspended state is preparing itself to receive injected code. Usually, it is done by <strong><code>VirtualAlloc(Ex)</code></strong> + <strong><code>VirtualProtect(Ex)</code></strong>.</p>
</blockquote>
<p>Using Process Hacker to confirm it, we are able to see that after executing the <strong><code>CreateProcessA</code></strong>, another binary is created, and the color is set to gray.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/ph-suspended-bin.png" title="Process Hacker" data-thumbnail="/images/zero2auto/2023-10-31/ph-suspended-bin.png" data-sub-html="<h2>Process Hacker</h2><p>Process Hacker</p>">
        
    </a><figcaption class="image-caption">Process Hacker</figcaption>
    </figure></p>
<blockquote>
<p>Another quick explanation here!</p>
<p>You can see the color definition in Process Hacker by the menu:</p>
<ul>
<li>Hacker &gt; Options &gt; Highlight</li>
</ul>
</blockquote>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/ph-options.png" title="Process Hacker &amp;gt; Options" data-thumbnail="/images/zero2auto/2023-10-31/ph-options.png" data-sub-html="<h2>Process Hacker &gt; Options</h2><p>Process Hacker &amp;gt; Options</p>">
        
    </a><figcaption class="image-caption">Process Hacker > Options</figcaption>
    </figure></p>
<p>As the process was created and <strong><code>EAX</code></strong> returns <strong><code>1</code></strong>, we can keep our analysis. After that <strong><code>VirtualAlloc</code></strong> is called and the return address is <strong><code>0x00DB0000</code></strong>. Just put it on dump by following the right-click on <strong><code>EAX &gt; Follow in Dump</code></strong>. After that <strong><code>GetThreadContext</code></strong> is called. Let&rsquo;s take a look at what this API is used for.</p>
<p>This time I&rsquo;m using another good place to learn about APIs, the <a href="https://malapi.io/winapi/GetThreadContext" target="_blank" rel="noopener noreffer ">MalAPI</a> tells us.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/malapi-get-thread-context.png" title="MalAPI" data-thumbnail="/images/zero2auto/2023-10-31/malapi-get-thread-context.png" data-sub-html="<h2>MalAPI</h2><p>MalAPI</p>">
        
    </a><figcaption class="image-caption">MalAPI</figcaption>
    </figure></p>
<p>To be honest, nothing new, right? We have already put an injection as a feasible hypothesis. The handle passed to this function was <strong><code>0x110</code></strong>, and we can see that it is related to our new instance. How can I know that? Simple! Looking for the <strong><code>PID</code></strong>, is the same ;P</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-thread.png" title="Threads" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-thread.png" data-sub-html="<h2>Threads</h2><p>Threads</p>">
        
    </a><figcaption class="image-caption">Threads</figcaption>
    </figure></p>
<p>We are finding interesting things here, let&rsquo;s move on. After that there is a call to <strong><code>ReadProcessMemory</code></strong>. And, according to <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory" target="_blank" rel="noopener noreffer ">MSDN</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>BOOL <span style="color:#a6e22e">ReadProcessMemory</span>(
</span></span><span style="display:flex;"><span>  [in]  HANDLE  hProcess,
</span></span><span style="display:flex;"><span>  [in]  LPCVOID lpBaseAddress,
</span></span><span style="display:flex;"><span>  [out] LPVOID  lpBuffer,
</span></span><span style="display:flex;"><span>  [in]  SIZE_T  nSize,
</span></span><span style="display:flex;"><span>  [out] SIZE_T  <span style="color:#f92672">*</span>lpNumberOfBytesRead
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>Here we have the params, the <strong><code>hProcess</code></strong>, <strong><code>lpBaseAddress</code></strong> and <strong><code>lpBuffer</code></strong>.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-read-process-memory.png" title="ReadProcessMemory Params" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-read-process-memory.png" data-sub-html="<h2>ReadProcessMemory Params</h2><p>ReadProcessMemory Params</p>">
        
    </a><figcaption class="image-caption">ReadProcessMemory Params</figcaption>
    </figure></p>
<p>Let&rsquo;s summarize after that, OK? It calls <strong><code>VirtualAllocEx</code></strong> to allocate memory in this new binary created, and calls <strong><code>WriteProcessMemory</code></strong> to put the new content there and calls <strong><code>SetThreadContext</code></strong> and then, <strong><code>ResumeThread</code></strong>. Nice, we are done, right? We saw everything, and we understood things there, so we finished!</p>
<p>NOOOOOO lol, we haven&rsquo;t finished here yet. Although the program ends after that, we missed some important things here. Let me refresh the details that we&rsquo;ve missed. We didn&rsquo;t see anything related to the resource, and we saw that there is a packed resource. Also, we didn&rsquo;t see the content that was injected there; why? Because we missed essential details and now, we will start from the point where we stopped.</p>
<p>Now we know what and how to do things, so. Let&rsquo;s start it again.</p>
<h2 id="now-the-true-analysis">Now, the TRUE analysis</h2>
<p>Okay, to speed up our process, we don&rsquo;t need to see everything again; just put a BP on <strong><code>VirtualAlloc</code></strong>, <strong><code>VirtualAllocEx</code></strong>, <strong><code>FindResourceA</code></strong> and <strong><code>LoadResource</code></strong>. With all needed BP sets, just run.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-breakpoints.png" title="BreakPoints" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-breakpoints.png" data-sub-html="<h2>BreakPoints</h2><p>BreakPoints</p>">
        
    </a><figcaption class="image-caption">BreakPoints</figcaption>
    </figure></p>
<p>The program first stops at the <strong><code>FindResource</code></strong> and after that, a call to <strong><code>LoadResource</code></strong>, and it results in the resource file loaded at the address <strong><code>0x00A06060</code></strong> as the image below.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-resource-loaded.png" title="Resource Loaded" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-resource-loaded.png" data-sub-html="<h2>Resource Loaded</h2><p>Resource Loaded</p>">
        
    </a><figcaption class="image-caption">Resource Loaded</figcaption>
    </figure></p>
<p>After that <strong><code>VirtualAlloc</code></strong> is called and in sequence we have a function which receives three arguments. Put all them on dump we have:</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-weird-function.png" title="Weird Function" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-weird-function.png" data-sub-html="<h2>Weird Function</h2><p>Weird Function</p>">
        
    </a><figcaption class="image-caption">Weird Function</figcaption>
    </figure></p>
<ol>
<li>The address allocated with <strong><code>VirtualAlloc</code></strong></li>
<li>A weird content</li>
<li>The value <strong><code>0x015400</code></strong></li>
</ol>
<p>Breaking it down, we can see on the assembly code some interesting thing.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ASM" data-lang="ASM"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F151D</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8985</span> <span style="color:#66d9ef">F0FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-110</span>],<span style="color:#66d9ef">eax</span>       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1523</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">57</span>                       <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">push</span> <span style="color:#66d9ef">edi</span>                             <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">Arg3</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">edi</span>:<span style="color:#66d9ef">EntryPoint</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1524</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">D4B</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">C</span>                  <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">lea</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">ebx</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">1</span><span style="color:#66d9ef">C</span>]        <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1527</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">51</span>                       <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">push</span> <span style="color:#66d9ef">ecx</span>                             <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">Arg2</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">ecx</span>:<span style="color:#66d9ef">EntryPoint</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1528</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">50</span>                       <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">push</span> <span style="color:#66d9ef">eax</span>                             <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">Arg1</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1529</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">E8</span> <span style="color:#ae81ff">82180000</span>              <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">call</span> &lt;<span style="color:#66d9ef">main_bin.sub_9F2DB0</span>&gt;           <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">sub_9F2DB0</span>
</span></span></code></pre></div><p>When ECX receives the content from EBX we have here <code>0x1C</code>, the size from the resource is <code>0x1541C</code>, the weird value is <strong><code>0x015400</code></strong>, coincident? I don&rsquo;t think so. And my dear friend, I can tell you why, it doesn&rsquo;t appears by voices in my head, it is because after this code I can see this other code here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ASM" data-lang="ASM"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1546</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">33</span><span style="color:#66d9ef">C0</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">xor</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">eax</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1548</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">F1F8400</span> <span style="color:#ae81ff">00000000</span>        <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">nop</span> <span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">eax</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">eax</span>],<span style="color:#66d9ef">eax</span>       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1550</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">888405</span> <span style="color:#66d9ef">F8FEFFFF</span>          <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">eax-108</span>],<span style="color:#66d9ef">al</span>     <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1557</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">40</span>                       <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">inc</span> <span style="color:#66d9ef">eax</span>                              <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1558</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">D</span> <span style="color:#ae81ff">00010000</span>              <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">cmp</span> <span style="color:#66d9ef">eax</span>,<span style="color:#ae81ff">100</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F155D</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">7</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">F1</span>                    <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">jl</span> <span style="color:#66d9ef">main_bin.9F1550</span>                   <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F155F</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">BBD</span> <span style="color:#66d9ef">ECFEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">edi</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-114</span>]       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1565</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">33</span><span style="color:#66d9ef">F6</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">xor</span> <span style="color:#66d9ef">esi</span>,<span style="color:#66d9ef">esi</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1567</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">66</span>:<span style="color:#ae81ff">0</span><span style="color:#66d9ef">F1F8400</span> <span style="color:#ae81ff">00000000</span>     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">nop</span> <span style="color:#66d9ef">word</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">eax</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">eax</span>],<span style="color:#66d9ef">ax</span>         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1570</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">A9C35</span> <span style="color:#66d9ef">F8FEFFFF</span>          <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">bl</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">esi-108</span>]     <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1577</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">B8</span> <span style="color:#ae81ff">89888888</span>              <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">eax</span>,<span style="color:#ae81ff">88888889</span>                     <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F157C</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">F7E6</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mul</span> <span style="color:#66d9ef">esi</span>                              <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F157E</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">BC6</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">esi</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1580</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">C1EA</span> <span style="color:#ae81ff">03</span>                  <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">shr</span> <span style="color:#66d9ef">edx</span>,<span style="color:#ae81ff">3</span>                            <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1583</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">BCA</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">edx</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1585</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">C1E1</span> <span style="color:#ae81ff">04</span>                  <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">shl</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#ae81ff">4</span>                            <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1588</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">BCA</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">sub</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">edx</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F158A</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">BC1</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">sub</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">ecx</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F158C</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">D8D</span> <span style="color:#66d9ef">F8FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">lea</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-108</span>]       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1592</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB64438</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">C</span>              <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">eax</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">edi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">C</span>]    <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1597</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">02</span><span style="color:#66d9ef">C3</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">al</span>,<span style="color:#66d9ef">bl</span>                            <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1599</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">02</span><span style="color:#66d9ef">F8</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">bh</span>,<span style="color:#66d9ef">al</span>                            <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F159B</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB6C7</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">bh</span>                         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F159E</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">03</span><span style="color:#66d9ef">C8</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">eax</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15A0</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB601</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">ecx</span>]          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15A3</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">888435</span> <span style="color:#66d9ef">F8FEFFFF</span>          <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">esi-108</span>],<span style="color:#66d9ef">al</span>     <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15AA</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">46</span>                       <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">inc</span> <span style="color:#66d9ef">esi</span>                              <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15AB</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8819</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">ecx</span>],<span style="color:#66d9ef">bl</span>             <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15AD</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">81</span><span style="color:#66d9ef">FE</span> <span style="color:#ae81ff">00010000</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">cmp</span> <span style="color:#66d9ef">esi</span>,<span style="color:#ae81ff">100</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15B3</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">7</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">BB</span>                    <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">jl</span> <span style="color:#66d9ef">main_bin.9F1570</span>                   <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15B5</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">BBD</span> <span style="color:#66d9ef">E8FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">edi</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-118</span>]       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15BB</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">33</span><span style="color:#66d9ef">F6</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">xor</span> <span style="color:#66d9ef">esi</span>,<span style="color:#66d9ef">esi</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15BD</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">A7D</span> <span style="color:#66d9ef">F8</span>                  <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">bh</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-8</span>]           <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15C0</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">A4D</span> <span style="color:#66d9ef">F9</span>                  <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">cl</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-7</span>]           <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15C3</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">85</span><span style="color:#66d9ef">FF</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">test</span> <span style="color:#66d9ef">edi</span>,<span style="color:#66d9ef">edi</span>                         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15C5</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">7</span><span style="color:#66d9ef">E</span> <span style="color:#ae81ff">56</span>                    <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">jle</span> <span style="color:#66d9ef">main_bin.9F161D</span>                  <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15C7</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">66</span>:<span style="color:#ae81ff">0</span><span style="color:#66d9ef">F1F8400</span> <span style="color:#ae81ff">00000000</span>     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">nop</span> <span style="color:#66d9ef">word</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">eax</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">eax</span>],<span style="color:#66d9ef">ax</span>         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15D0</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">FEC7</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">inc</span> <span style="color:#66d9ef">bh</span>                               <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15D2</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">D95</span> <span style="color:#66d9ef">F8FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">lea</span> <span style="color:#66d9ef">edx</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-108</span>]       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15D8</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB6C7</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">bh</span>                         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15DB</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">03</span><span style="color:#66d9ef">D0</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">edx</span>,<span style="color:#66d9ef">eax</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15DD</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">A1A</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">bl</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">edx</span>]             <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15DF</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">02</span><span style="color:#66d9ef">CB</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">cl</span>,<span style="color:#66d9ef">bl</span>                            <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15E1</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB6C1</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">cl</span>                         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15E4</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">888</span><span style="color:#66d9ef">D</span> <span style="color:#66d9ef">F7FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-109</span>],<span style="color:#66d9ef">cl</span>         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15EA</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">D8D</span> <span style="color:#66d9ef">F8FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">lea</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-108</span>]       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15F0</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">03</span><span style="color:#66d9ef">C8</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">eax</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15F2</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB601</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">ecx</span>]          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15F5</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8802</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">edx</span>],<span style="color:#66d9ef">al</span>             <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15F7</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8819</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">ecx</span>],<span style="color:#66d9ef">bl</span>             <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15F9</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB602</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">edx</span>]          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F15FC</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">B8D</span> <span style="color:#66d9ef">F0FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">ecx</span>,<span style="color:#66d9ef">dword</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-110</span>]       <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1602</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">02</span><span style="color:#66d9ef">C3</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">al</span>,<span style="color:#66d9ef">bl</span>                            <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1604</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB6C0</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">al</span>                         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1607</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">FB68405</span> <span style="color:#66d9ef">F8FEFFFF</span>        <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">movzx</span> <span style="color:#66d9ef">eax</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">eax-108</span>]  <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F160F</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">30040</span><span style="color:#66d9ef">E</span>                   <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">xor</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ds</span>:[<span style="color:#66d9ef">esi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">ecx</span>],<span style="color:#66d9ef">al</span>         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1612</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">46</span>                       <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">inc</span> <span style="color:#66d9ef">esi</span>                              <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1613</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">8</span><span style="color:#66d9ef">A8D</span> <span style="color:#66d9ef">F7FEFFFF</span>            <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">cl</span>,<span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> <span style="color:#66d9ef">ss</span>:[<span style="color:#66d9ef">ebp-109</span>]         <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F1619</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">BF7</span>                     <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">cmp</span> <span style="color:#66d9ef">esi</span>,<span style="color:#66d9ef">edi</span>                          <span style="color:#960050;background-color:#1e0010">|</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">009</span><span style="color:#a6e22e">F161B</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#ae81ff">7</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">B3</span>                    <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#66d9ef">jl</span> <span style="color:#66d9ef">main_bin.9F15D0</span>                   <span style="color:#960050;background-color:#1e0010">|</span>
</span></span></code></pre></div><p>And for me, it looks like <a href="https://en.wikipedia.org/wiki/RC4" target="_blank" rel="noopener noreffer ">RC4 Cipher</a>. I have already dealt with it in an old video that you can find the <a href="https://www.youtube.com/watch?v=-Kk-r5NxtSA" target="_blank" rel="noopener noreffer "><strong>video</strong></a> here.</p>
<p><a href="https://www.youtube.com/watch?v=-Kk-r5NxtSA" title="RC4 Extractor" target="_blank" rel="noopener noreffer "><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/youtube-rc4-extractor.png" title="RC4 Extractor" data-thumbnail="/images/zero2auto/2023-10-31/youtube-rc4-extractor.png" data-sub-html="<h2>RC4 Extractor</h2><p>RC4 Extractor</p>">
        
    </a><figcaption class="image-caption">RC4 Extractor</figcaption>
    </figure></a></p>
<p>Based on that, this difference looks like the RC4 Key and the rest that should be decoded, using <a href="https://cyberchef.org/" target="_blank" rel="noopener noreffer ">cyberchef</a> when can easily validate it.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/rh-key.png" title="RH Key" data-thumbnail="/images/zero2auto/2023-10-31/rh-key.png" data-sub-html="<h2>RH Key</h2><p>RH Key</p>">
        
    </a><figcaption class="image-caption">RH Key</figcaption>
    </figure></p>
<p>I have the possible key:</p>
<blockquote>
<p>01 DD 0C 92 00 22 00 00 00 22 00 00 6B 6B 64 35 59 64 50 4D 32 34 56 42 58 6D 69 00</p>
</blockquote>
<p>And I got just some bytes to validate if it is correct.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/rh-binary-encoded.png" title="RH Binary" data-thumbnail="/images/zero2auto/2023-10-31/rh-binary-encoded.png" data-sub-html="<h2>RH Binary</h2><p>RH Binary</p>">
        
    </a><figcaption class="image-caption">RH Binary</figcaption>
    </figure></p>
<blockquote>
<p>03 3C 65 A7
EC 58 FB B6 93 E6 EC E7 89 00 00 27 72 20 65 29
DF DD F0 10 7B FA 3B E3 0A 52 20 9D 9B 6C 25 BA
4A EF 5B 08 D4 0E 77 F1 50 E3 08 9C 11 36 E8 E0
9F 82 BD F5 89 B8 96 52 50 9C D3 2C 6D 59 19 CE
D4 82 54 DA 8A 93 19 99 1C 21 A9 12 C5 2A 1B 4A</p>
</blockquote>
<p>Unfortunately, it didn&rsquo;t work, so sad, no?</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/cc-rc4-error.png" title="Cyber Chef" data-thumbnail="/images/zero2auto/2023-10-31/cc-rc4-error.png" data-sub-html="<h2>Cyber Chef</h2><p>Cyber Chef</p>">
        
    </a><figcaption class="image-caption">Cyber Chef</figcaption>
    </figure></p>
<p>Not really, just keeping taking a look on dbg we can see that it does not use the <strong><code>0x1C</code></strong>; it starts by the <strong><code>0xC</code></strong> position, so our key was almost correct, but we found out that the correct one is with only <strong><code>0xF</code></strong> bytes.</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/x64dbg-rc4-correct-key.png" title="RC4 Correct Key" data-thumbnail="/images/zero2auto/2023-10-31/x64dbg-rc4-correct-key.png" data-sub-html="<h2>RC4 Correct Key</h2><p>RC4 Correct Key</p>">
        
    </a><figcaption class="image-caption">RC4 Correct Key</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/rh-correct-key.png" title="RH Correct Key" data-thumbnail="/images/zero2auto/2023-10-31/rh-correct-key.png" data-sub-html="<h2>RH Correct Key</h2><p>RH Correct Key</p>">
        
    </a><figcaption class="image-caption">RH Correct Key</figcaption>
    </figure></p>
<p>Very cool, isn&rsquo;t it? Trying this key one more time, we got the correct and beautiful <strong><code>MZ</code></strong> &lt;3</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/cc-rc4-correct.png" title="RC4 Correct" data-thumbnail="/images/zero2auto/2023-10-31/cc-rc4-correct.png" data-sub-html="<h2>RC4 Correct</h2><p>RC4 Correct</p>">
        
    </a><figcaption class="image-caption">RC4 Correct</figcaption>
    </figure></p>
<p>And now, we know&hellip;</p>
<p><figure><a class="lightgallery" href="/images/zero2auto/2023-10-31/movie.png" title="I Know What You Did Last Summer Filme" data-thumbnail="/images/zero2auto/2023-10-31/movie.png" data-sub-html="<h2>I Know What You Did Last Summer Filme</h2><p>I Know What You Did Last Summer Filme</p>">
        
    </a><figcaption class="image-caption">I Know What You Did Last Summer Filme</figcaption>
    </figure></p>
<p>After that, happens the same as we&rsquo;ve previously analyzed it. We should now analyze this resource! But, it will be in the next part of this <strong><code>Zero2Auto Custom Sample</code></strong> series.</p>
<p>Thank you for reading until here! See you around! :)</p>
]]></description>
</item>
</channel>
</rss>
